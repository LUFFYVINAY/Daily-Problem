/*class Solution {
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];  
        int count = 0;

        // Traverse through each cell of the grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // If the cell is land ('1') and not visited yet, it's part of a new island
                if (grid[i][j] == '1' && !visited[i][j]) {
                    // Start DFS to mark all connected land as visited
                    dfs(grid, visited, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    
    public void dfs(char[][] grid, boolean[][] visited, int i, int j) {
        int n = grid.length;
        int m = grid[0].length;

        // Boundary check and other base cases
        if (i < 0 || i >= n || j < 0 || j >= m || grid[i][j] == '0' || visited[i][j]) {
            return;
        }

        // Mark the current cell as visited
        visited[i][j] = true;

        // Explore in all 8 possible directions
        dfs(grid, visited, i, j + 1);    // right
        dfs(grid, visited, i + 1, j);    // down
        dfs(grid, visited, i, j - 1);    // left
        dfs(grid, visited, i - 1, j);    // up
        dfs(grid, visited, i + 1, j + 1); // diagonal down-right
        dfs(grid, visited, i + 1, j - 1); // diagonal down-left
        dfs(grid, visited, i - 1, j - 1); // diagonal up-left
        dfs(grid, visited, i - 1, j + 1); // diagonal up-right
    }
}*/
class Solution {
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int count = 0;

        // Directions array for moving in 8 directions (right, down, left, up, and diagonals)
        int[] dirX = {0, 1, 0, -1, 1, 1, -1, -1};
        int[] dirY = {1, 0, -1, 0, 1, -1, 1, -1};

        // Traverse through each cell of the grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // If the cell is land ('1') and not visited yet, start BFS
                if (grid[i][j] == '1' && !visited[i][j]) {
                    bfs(grid, visited, i, j, dirX, dirY);
                    count++;
                }
            }
        }

        return count;
    }

    // BFS function to explore the island
    public void bfs(char[][] grid, boolean[][] visited, int i, int j, int[] dirX, int[] dirY) {
        int n = grid.length;
        int m = grid[0].length;

        // Queue for BFS
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{i, j});
        visited[i][j] = true;

        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int x = cell[0];
            int y = cell[1];

            // Explore all 8 possible directions
            for (int k = 0; k < 8; k++) {
                int newX = x + dirX[k];
                int newY = y + dirY[k];

                // Boundary check and ensure it's a land cell that hasn't been visited
                if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == '1' && !visited[newX][newY]) {
                    queue.add(new int[]{newX, newY});
                    visited[newX][newY] = true;
                }
            }
        }
    }
}
