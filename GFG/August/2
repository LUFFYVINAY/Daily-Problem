class Solution
{
    // Function to return the minimum cost to reach the bottom
    // right cell from the top left cell.
    
   /* public int dfs(int[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return Integer.MAX_VALUE;
        }
        
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return grid[i][j];
        }
        
        int right = dfs(grid, i, j + 1);
        int down = dfs(grid, i + 1, j);
        
        
        return  grid[i][j] + Math.min(right,down);
    }
    
    public int minimumCostPath(int[][] grid) {
        // Code here
        int n = grid.length;
        int m = grid[0].length;
        int cost = grid[0][0];
        
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                cost = dfs(grid,0,0);
            }
        }
        return cost;
    }*/
   /* public int minimumCostPath(int[][] grid) {
    int n = grid.length;
    int m = grid[0].length;

    // Initialize the DP array to store minimum costs
    int[][] dp = new int[n][m];

    // Start by initializing the starting point
    dp[0][0] = grid[0][0];

    // Fill the first row (left to right)
    for (int j = 1; j < m; j++) {
        dp[0][j] = grid[0][j] + dp[0][j - 1];
    }

    // Fill the first column (top to bottom)
    for (int i = 1; i < n; i++) {
        dp[i][0] = grid[i][0] + dp[i - 1][0];
    }

    // Fill the rest of the DP table
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            dp[i][j] = grid[i][j] +Math.min(dp[i][j+1] , Math.min(dp[i+1][j],Math.min(dp[i-1][j],dp[i][j-1]))));
        }
    }

    // The answer is in the bottom-right corner of the DP table
    return dp[n - 1][m - 1];
}*/



    public int minimumCostPath(int[][] grid)
    {
        // Code here
        int n = grid.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Integer.compare(a[0],b[0]));
        int dis[][] = new int[n][n];
        for(int temp[]:dis)Arrays.fill(temp,Integer.MAX_VALUE);
        dis[0][0]=grid[0][0];
        pq.add(new int[]{grid[0][0],0,0});
        int dirX[]={-1,1,0,0};
        int dirY[]={0,0,-1,1};
        while(pq.size()!=0){
            int temp[] = pq.poll();
            int d = temp[0];
            for(int k=0;k<4;k++){
                int i = temp[1]+dirX[k];
                int j = temp[2]+dirY[k];
                if(i<n && j<n && i>=0 && j>=0 && d+grid[i][j]<dis[i][j]){
                    dis[i][j] = d+grid[i][j];
                    pq.add(new int[]{d+grid[i][j],i,j});
                }
            }
        }
        return dis[n-1][n-1];
    }

    
}

