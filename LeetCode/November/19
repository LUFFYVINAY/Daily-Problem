class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long max = 0, sum = 0;
        HashSet<Integer> uniqueElements = new HashSet<>();
        int start = 0;

        for (int end = 0; end < nums.length; end++) {
            // Ensure the window has unique elements
            while (uniqueElements.contains(nums[end])) {
                uniqueElements.remove(nums[start]);
                sum -= nums[start];
                start++;
            }

            // Add the current element to the window
            uniqueElements.add(nums[end]);
            sum += nums[end];

            // Check if the window size equals k
            if (end - start + 1 == k) {
                max = Math.max(max, sum);

                // Slide the window
                sum -= nums[start];
                uniqueElements.remove(nums[start]);
                start++;
            }
        }

        return max;
    }
}
