class Solution {
    public int robotSim(int[] commands, int[][] obstacles) {
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, { -1, 0}};
        int[] curPos = {0, 0};
        int curDir = 0;
        int res = 0;
        HashMap<Integer, HashSet<Integer>> mp = new HashMap<>();

        for (int i = 0; i < obstacles.length; i++) {
            if (!mp.containsKey(obstacles[i][0])) {
                mp.put(obstacles[i][0], new HashSet<>());
            }
            mp.get(obstacles[i][0]).add(obstacles[i][1]);
        }

        for (int i = 0; i < commands.length; i++) {
            if (commands[i] == -1) {
                curDir = (curDir + 1) % 4;
                continue;
            }
            if (commands[i] == -2) {
                curDir = (curDir - 1 + 4) % 4;
                continue;
            }

            int[] direction = directions[curDir];
            for (int j = 0; j < commands[i]; j++) {
                int newX = curPos[0] + direction[0];
                int newY = curPos[1] + direction[1];

                if (mp.containsKey(newX) && mp.get(newX).contains(newY)) {
                    break;
                }

                curPos[0] = newX;
                curPos[1] = newY;
                res = Math.max(res, curPos[0] * curPos[0] + curPos[1] * curPos[1]);
            }
        }

        return res;
    }
}
