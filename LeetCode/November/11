/*class Solution {
    boolean[] arr = new boolean[1000];

    public boolean primeSubOperation(int[] nums) {
        fill(arr);
        if (isSorted(nums)) {
            return true;
        }
        if(nums.length==1){
            return true;
        }
        if(nums.length==2){
            if(nums[0]<nums[1]){
                return true;
            }
        }

        int currValue = 1;
        int i = 0;
        while (i < nums.length) {
            
            int difference = nums[i] - currValue;

            
            if (difference < 0) {
                return false;
            }

            
            if (arr[difference] || difference == 0) {
                i++;
                currValue++;
            } else {
                
                currValue++;
            }
        }
        return true;
    }

    public boolean isSorted(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                return false;
            }
        }
        return true;
    }

    public void fill(boolean[] arr) {
        for (int i = 1; i < arr.length; i++) {
            arr[i] = isPrime(i);
        }
    }

    public boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 == 0 || n % 3 == 0) return false;
        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) return false;
        }
        return true;
    }
}*/
class Solution {
    boolean[] arr = new boolean[1000];

    public boolean primeSubOperation(int[] nums) {
        fill(arr);

        int prevValue = 0;
        for (int i = 0; i < nums.length; i++) {
            boolean found = false;
            for (int p = nums[i] - 1; p >= 0; p--) {
                if (arr[p] && nums[i] - p > prevValue) {
                    nums[i] -= p;
                    found = true;
                    break;
                }
            }
            if (!found && nums[i] <= prevValue) {
                return false;
            }
            prevValue = nums[i];
        }
        return true;
    }

    public void fill(boolean[] arr) {
        for (int i = 2; i < arr.length; i++) {
            arr[i] = isPrime(i);
        }
    }

    public boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n <= 3) return true;
        if (n % 2 == 0 || n % 3 == 0) return false;
        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) return false;
        }
        return true;
    }
}

