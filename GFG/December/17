class Solution {
    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length;
     Arrays.sort(stalls);
        int start = 1; // The minimum possible distance
        int end = stalls[n-1] - stalls[0]; // The maximum possible distance
        int ans = 0;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (isValid(mid, stalls, k)) {
                ans = mid;
                start = mid + 1; // Try for a larger minimum distance
            } else {
                end = mid - 1; // Try for a smaller minimum distance
            }
        }

        return ans;
    }

    public static boolean isValid(int midDist, int[] stalls, int k) {
        int countCows = 1; // Place the first cow in the first stall
        int lastCowPos = stalls[0];

        for (int i = 1; i < stalls.length; i++) {
            if (stalls[i] - lastCowPos >= midDist) {
                countCows++;
                lastCowPos = stalls[i];
            }
        }

        return countCows >= k;
    }
}
