/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
      public List<Integer> largestValues(TreeNode root) {
        List<Integer> largestValues = new ArrayList<>();
        dfs(root, 0, largestValues);
        return largestValues;
    }

    private void dfs(TreeNode node, int level, List<Integer> largestValues) {
        if (node == null) {
            return;
        }

        if (level == largestValues.size()) {
            // Add a new row with the first value encountered
            largestValues.add(node.val);
        } else {
            // Update the maximum value for the current row
            largestValues.set(level, Math.max(largestValues.get(level), node.val));
        }

        // Recursively explore the left and right subtrees
        dfs(node.left, level + 1, largestValues);
        dfs(node.right, level + 1, largestValues);
    }
}
