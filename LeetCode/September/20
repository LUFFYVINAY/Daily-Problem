class Solution {
    public String shortestPalindrome(String s) {
        String reverse = new StringBuilder(s).reverse().toString();
        String combined = s + "#" + reverse;
        
        // Compute the KMP table (longest prefix which is also a suffix)
        int[] kmpTable = computeKMP(combined);
        
        // Length of the longest palindromic prefix
        int palinLen = kmpTable[kmpTable.length - 1];
        
        // Characters to add in front are from the reversed string excluding the palindromic part
        String toAdd = reverse.substring(0, reverse.length() - palinLen);
        
        // Form the shortest palindrome
        return toAdd + s;
    }

    private int[] computeKMP(String str) {
        int[] kmpTable = new int[str.length()];
        int j = 0; // length of previous longest prefix suffix
        
        for (int i = 1; i < str.length(); i++) {
            while (j > 0 && str.charAt(i) != str.charAt(j)) {
                j = kmpTable[j - 1];
            }
            if (str.charAt(i) == str.charAt(j)) {
                j++;
            }
            kmpTable[i] = j;
        }
        return kmpTable;
    }
}
