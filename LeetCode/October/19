class Solution {
    public char findKthBit(int n, int k) {
        // Base case: For n = 1, the sequence is "0"
        if (n == 1) {
            return '0';
        }

        // Calculate the middle index for the current level's sequence
        int length = (1 << n) - 1; 
        int mid = length / 2 + 1; 
        if (k == mid) {
            return '1'; 
        } else if (k < mid) {
            return findKthBit(n - 1, k); // If k is on the left, recurse on the same side
        } else {
            // If k is on the right, find the complement of the mirrored position
            return invert(findKthBit(n - 1, length - k + 1));
        }
    }

    
    private char invert(char bit) {
        return bit == '0' ? '1' : '0';
    }
}
