class Solution {
    public long pickGifts(int[] gifts, int k) {
        // Use a max heap to always process the largest gift
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        
        // Add all gifts to the max heap
        for (int gift : gifts) {
            maxHeap.add(gift);
        }
        
        // Perform the operation k times
        for (int i = 0; i < k; i++) {
            if (!maxHeap.isEmpty()) {
                int maxGift = maxHeap.poll(); // Remove the largest gift
                int reducedGift = (int) Math.sqrt(maxGift); // Reduce its value
                maxHeap.add(reducedGift); // Add the reduced value back to the heap
            }
        }
        
        // Calculate the total sum of remaining gifts
        long sum = 0;
        while (!maxHeap.isEmpty()) {
            sum += maxHeap.poll();
        }
        
        return sum;
    }
}

