
/*class Solution {
    public void setMatrixZeroes(int[][] mat) {
        Stack<Pair> ans = new Stack<>();
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    ans.push(new Pair(i, j));
                }
            }
        }

        while (!ans.isEmpty()) {
            Pair current = ans.pop();
            int i = current.i;
            int j = current.j;

            // Set the entire row to 0
            for (int k = 0; k < mat[0].length; k++) {
                mat[i][k] = 0;
            }
            // Set the entire column to 0
            for (int k = 0; k < mat.length; k++) {
                mat[k][j] = 0;
            }
        }
    }
}

class Pair {
    int i;
    int j;

    Pair(int i, int j) {
        this.i = i;
        this.j = j;
    }
}*/

/*class Solution {
    public void setMatrixZeroes(int[][] mat) {
        boolean firstRowZero = false, firstColZero = false;

        // Check if the first row contains a zero
        for (int j = 0; j < mat[0].length; j++) {
            if (mat[0][j] == 0) {
                firstRowZero = true;
                break;
            }
        }

        // Check if the first column contains a zero
        for (int i = 0; i < mat.length; i++) {
            if (mat[i][0] == 0) {
                firstColZero = true;
                break;
            }
        }

        // Use the first row and first column to mark zeros
        for (int i = 1; i < mat.length; i++) {
            for (int j = 1; j < mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    mat[i][0] = 0; // Mark the first column
                    mat[0][j] = 0; // Mark the first row
                }
            }
        }

        // Set the cells to zero based on the marks
        for (int i = 1; i < mat.length; i++) {
            for (int j = 1; j < mat[0].length; j++) {
                if (mat[i][0] == 0 || mat[0][j] == 0) {
                    mat[i][j] = 0;
                }
            }
        }

        // Handle the first row
        if (firstRowZero) {
            for (int j = 0; j < mat[0].length; j++) {
                mat[0][j] = 0;
            }
        }

        // Handle the first column
        if (firstColZero) {
            for (int i = 0; i < mat.length; i++) {
                mat[i][0] = 0;
            }
        }
    }
}*/

class Solution {
    public void setMatrixZeroes(int[][] mat) {
        List<Integer> is = new ArrayList<Integer>();
        List<Integer> js = new ArrayList<Integer>();
        int n = mat.length, m=mat[0].length;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(mat[i][j]==0) {
                    if(!is.contains(i)) is.add(i);
                    if(!js.contains(j)) js.add(j);
                }
            }
        }
        
        for(int i=0;i<is.size(); i++) {
            for(int j=0;j<m; j++) {
                mat[is.get(i)][j]=0;
            }
        }
        for(int j=0;j<js.size(); j++) {
            for(int i=0;i<n; i++) {
                mat[i][js.get(j)]=0;
            }
        }
    }
}
