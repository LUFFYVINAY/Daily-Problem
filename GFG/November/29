
class Solution {
    public String addBinary(String s1, String s2) {
        // code here
        // long n1 = BinaryToString(s1);
        // long n2 = BinaryToString(s2);
        
        // long sum = n1 + n2;
        
        // return IntToBinary(sum);
        // int n1 = s1.length() - 1; // Index starts from the end of the string
        // int n2 = s2.length() - 1; // Index starts from the end of the string
        
        // int carry = 0, base = 2;
        // StringBuilder sb = new StringBuilder();
        
        // while (n1 >= 0 || n2 >= 0) {
        //     int t1 = 0, t2 = 0;
            
        //     // Extract the binary digit from s1 if within bounds
        //     if (n1 >= 0) {
        //         t1 = s1.charAt(n1--) - '0';
        //     }
            
        //     // Extract the binary digit from s2 if within bounds
        //     if (n2 >= 0) {
        //         t2 = s2.charAt(n2--) - '0';
        //     }
            
        //     // Calculate the sum of digits and carry
        //     int sum = carry + t1 + t2;
            
        //     // Determine carry and the digit to append
        //     if (sum >= base) {
        //         carry = 1;
        //         sum -= base;
        //     } else {
        //         carry = 0;
        //     }
            
        //     // Append the current digit to the result
        //     sb.append(sum);
        // }
        
        // // If there's a remaining carry, append it
        // if (carry == 1) {
        //     sb.append(carry);
        // }
        
        // // Reverse the result and return
        // return sb.reverse().toString();
        

        StringBuilder ans = new StringBuilder();
        int i = s1.length() - 1;
        int j = s2.length() - 1;
        int carry = 0;

        while (i >= 0 || j >= 0) {
            int count1s = 0;

            if (i >= 0 && s1.charAt(i) == '1') count1s++;
            if (j >= 0 && s2.charAt(j) == '1') count1s++;

            if (count1s + carry == 0) {
                ans.append('0');
                carry = 0;
            } else if (count1s + carry == 1) {
                ans.append('1');
                carry = 0;
            } else if (count1s + carry == 2) {
                ans.append('0');
                carry = 1;
            } else if (count1s + carry == 3) {
                ans.append('1');
                carry = 1;
            }
            i--;
            j--;
        }

        if (carry == 1) {
            ans.append('1');
        }

        ans.reverse();

        // Remove leading zeroes
        while (ans.length() > 1 && ans.charAt(0) == '0') {
            ans.deleteCharAt(0);
        }

        return ans.toString();
    }

    // public int BinaryToString(String s)
    // {
    //     return Long.parseLong(s,2);
    // }
    // public String IntToBinary(long s){
    //     return Long.toBinaryString(s);
    // }
}
